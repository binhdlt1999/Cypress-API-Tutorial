{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-07T10:01:07.074Z",
    "end": "2023-11-07T10:01:07.212Z",
    "duration": 138,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d6a9b82-c2a9-44b8-8b78-1078f72b72eb",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_006_handle_async.js",
      "file": "cypress\\api_test_scripts\\TC_006_handle_async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bd5a340-dafe-4f73-a2c6-3ce45dc5b638",
          "title": "Handling async request in Cypress - just for single request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to wait until a request resolved",
              "fullTitle": "Handling async request in Cypress - just for single request should be able to wait until a request resolved",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//-------------------------------------------------------------------------------\n// use await\n// let response = await cy.request({\n//     url: 'https://jsonplaceholder.typicode.com/posts',\n//     method: 'GET',\n// })\n// expect(response.status).to.eq(200)\n// expect(response.body.length).to.eq(100);\n// // asyn await just use for single request\n// // let deleteRes = await new Cypress.Promise((resolve, reject) => \n// //     cy.request({\n// //         method: DEFAULT.delete,\n// //         url: \"https://jsonplaceholder.typicode.com/posts/1\"\n// //     }).then(val => resolve(val))\n// // )\n// // cy.log(JSON.stringify(deleteRes))\n//-------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------\n// let url = 'https://jsonplaceholder.typicode.com/posts'\n// let url = Cypress.env(\"baseUrl\")\n// let header = {\n//     'Content-type': 'application/json; charset=UTF-8',\n// }\nlet createdPostBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: 'foo updated',\n  body: 'bar updated',\n  userId: 3\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.putPost(res.body.id, updatedPostBody).then(res => {\n      let {\n        status,\n        body\n      } = res;\n      let {\n        id,\n        userId,\n        title\n      } = body;\n      let resBody = body.body;\n      // Verification\n      expect(status).to.eq(200, 'verifying Response header');\n      expect(id).to.eq(id, 'verifying id');\n      expect(userId).to.eq(updatedPostBody.userId, 'verifying userid');\n      expect(title).to.eq(updatedPostBody.title, 'verifying title');\n      expect(resBody).to.eq(updatedPostBody.body, 'verifying body');\n      cy.delPost(res.body.id).then(res => {\n        let {\n          status,\n          body\n        } = res;\n        // Verification\n        expect(status).to.eq(200, 'Verifying status');\n        expect(body).to.be.empty;\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "0e4c363a-f80b-4f61-aefa-73942993fcc4",
              "parentUUID": "4bd5a340-dafe-4f73-a2c6-3ce45dc5b638",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e4c363a-f80b-4f61-aefa-73942993fcc4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}