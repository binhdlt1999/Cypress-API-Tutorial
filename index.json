{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-11-07T10:00:50.353Z",
    "end": "2023-11-07T10:01:07.212Z",
    "duration": 16859
  },
  "results": [
    {
      "uuid": "b6084a12-0b19-4056-8465-38460d4e446a",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_003_POST_request.js",
      "file": "cypress\\api_test_scripts\\TC_003_POST_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "35d7306a-a5c3-4bf5-b62b-8781a0da3f29",
          "title": "Test POST request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send POST request and verify the response",
              "fullTitle": "Test POST request should be able to send POST request and verify the response",
              "timedOut": null,
              "duration": 397,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = 'https://jsonplaceholder.typicode.com/posts';\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet requestBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet requestObject = {\n  url: url,\n  method: 'POST',\n  body: requestBody,\n  headers: header\n};\ncy.request(requestObject).then(res => {\n  let {\n    status,\n    body\n  } = res;\n  expect(status).to.eq(201, 'Status is not 201');\n  // cy.log(JSON.stringify(res))\n  let {\n    title,\n    userId,\n    id\n  } = body;\n  let responseBody = body.body;\n  // Verification\n  expect(id).to.eq(101, 'id is not correct');\n  expect(userId).to.eq(requestBody.userId, 'userid is not correct');\n  expect(title).to.eq(requestBody.title, 'title is not correct');\n  expect(responseBody).to.eq(requestBody.body, 'body is not correct');\n});",
              "err": {},
              "uuid": "c25048d9-c48f-4ea0-80c3-6d9b98c2aeba",
              "parentUUID": "35d7306a-a5c3-4bf5-b62b-8781a0da3f29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c25048d9-c48f-4ea0-80c3-6d9b98c2aeba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 397,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "07bed4a8-5e21-4616-9cc3-bf9bc765ce3b",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_004_PUT_request.js",
      "file": "cypress\\api_test_scripts\\TC_004_PUT_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "812b07e8-65de-4946-90ff-00d44e0defc3",
          "title": "Test PUT request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send PUT request and verify the response",
              "fullTitle": "Test PUT request should be able to send PUT request and verify the response",
              "timedOut": null,
              "duration": 903,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = 'https://jsonplaceholder.typicode.com/posts/1';\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet reqBody = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet requestObject = {\n  url: url,\n  method: 'PUT',\n  body: reqBody,\n  headers: header\n};\ncy.request(requestObject).then(res => {\n  let {\n    status,\n    body\n  } = res;\n  // cy.log(JSON.stringify(res.body))\n  let {\n    title,\n    userId,\n    id\n  } = body;\n  let responseBody = body.body;\n  // Verification\n  expect(status).to.eq(200, 'verifying Response header');\n  expect(id).to.eq(reqBody.id, 'verifying id');\n  expect(userId).to.eq(reqBody.userId, 'verifying userid');\n  expect(title).to.eq(reqBody.title, 'verifying title');\n  expect(responseBody).to.eq(reqBody.body, 'verifying body');\n});",
              "err": {},
              "uuid": "dbeedae5-6bcd-4bcb-97d8-283e0f4e08fa",
              "parentUUID": "812b07e8-65de-4946-90ff-00d44e0defc3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbeedae5-6bcd-4bcb-97d8-283e0f4e08fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 903,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3b8ee283-1fd7-4c1c-b618-f0f7b4905ecb",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_005_DELETE_request.js",
      "file": "cypress\\api_test_scripts\\TC_005_DELETE_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9d1d107f-31e0-40dd-8ecc-3e1c9a93b785",
          "title": "Test DELETE request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send DELETE request",
              "fullTitle": "Test DELETE request should be able to send DELETE request",
              "timedOut": null,
              "duration": 377,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = 'https://jsonplaceholder.typicode.com/posts/1';\nlet requestObject = {\n  url: url,\n  method: _Method.DEFAULT.delete\n};\ncy.request(requestObject).then(res => {\n  // cy.log(JSON.stringify(res))\n  let {\n    status,\n    body\n  } = res;\n  // Verification\n  expect(status).to.eq(200, 'Verifying status');\n  expect(body).to.be.empty;\n});",
              "err": {},
              "uuid": "4893e931-e6e7-49fe-bf86-e59162551aad",
              "parentUUID": "9d1d107f-31e0-40dd-8ecc-3e1c9a93b785",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4893e931-e6e7-49fe-bf86-e59162551aad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 377,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9d6a9b82-c2a9-44b8-8b78-1078f72b72eb",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_006_handle_async.js",
      "file": "cypress\\api_test_scripts\\TC_006_handle_async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bd5a340-dafe-4f73-a2c6-3ce45dc5b638",
          "title": "Handling async request in Cypress - just for single request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to wait until a request resolved",
              "fullTitle": "Handling async request in Cypress - just for single request should be able to wait until a request resolved",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//-------------------------------------------------------------------------------\n// use await\n// let response = await cy.request({\n//     url: 'https://jsonplaceholder.typicode.com/posts',\n//     method: 'GET',\n// })\n// expect(response.status).to.eq(200)\n// expect(response.body.length).to.eq(100);\n// // asyn await just use for single request\n// // let deleteRes = await new Cypress.Promise((resolve, reject) => \n// //     cy.request({\n// //         method: DEFAULT.delete,\n// //         url: \"https://jsonplaceholder.typicode.com/posts/1\"\n// //     }).then(val => resolve(val))\n// // )\n// // cy.log(JSON.stringify(deleteRes))\n//-------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------\n// let url = 'https://jsonplaceholder.typicode.com/posts'\n// let url = Cypress.env(\"baseUrl\")\n// let header = {\n//     'Content-type': 'application/json; charset=UTF-8',\n// }\nlet createdPostBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: 'foo updated',\n  body: 'bar updated',\n  userId: 3\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.putPost(res.body.id, updatedPostBody).then(res => {\n      let {\n        status,\n        body\n      } = res;\n      let {\n        id,\n        userId,\n        title\n      } = body;\n      let resBody = body.body;\n      // Verification\n      expect(status).to.eq(200, 'verifying Response header');\n      expect(id).to.eq(id, 'verifying id');\n      expect(userId).to.eq(updatedPostBody.userId, 'verifying userid');\n      expect(title).to.eq(updatedPostBody.title, 'verifying title');\n      expect(resBody).to.eq(updatedPostBody.body, 'verifying body');\n      cy.delPost(res.body.id).then(res => {\n        let {\n          status,\n          body\n        } = res;\n        // Verification\n        expect(status).to.eq(200, 'Verifying status');\n        expect(body).to.be.empty;\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "0e4c363a-f80b-4f61-aefa-73942993fcc4",
              "parentUUID": "4bd5a340-dafe-4f73-a2c6-3ce45dc5b638",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e4c363a-f80b-4f61-aefa-73942993fcc4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "adbe4405-ad3f-4a27-b9d4-1208978c457e",
      "title": "",
      "fullFile": "cypress\\api_test_scripts\\TC_001-2_GET_request.js",
      "file": "cypress\\api_test_scripts\\TC_001-2_GET_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "07e69ebe-642b-4e23-93e8-e93716ad200e",
          "title": "Test GET request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send GET request",
              "fullTitle": "Test GET request should be able to send GET request",
              "timedOut": null,
              "duration": 362,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  method: 'GET'\n}).then(res => {\n  let {\n    status,\n    body\n  } = res;\n  expect(status).to.eq(200);\n  expect(body).to.have.lengthOf(100);\n  expect(body.length).to.eq(100);\n  // Get random element from array object\n  let randomIndex = Math.floor(Math.random() * body.length);\n  let randomObject = body[randomIndex];\n  // Verification\n  verifyNotEmpty('userID', randomObject.userId);\n  verifyNotEmpty('ID', randomObject.id);\n  verifyNotEmpty('title', randomObject.title);\n  verifyNotEmpty('body', randomObject.body);\n});",
              "err": {},
              "uuid": "92154b49-0a8c-4efc-8355-59ce323f67f0",
              "parentUUID": "07e69ebe-642b-4e23-93e8-e93716ad200e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92154b49-0a8c-4efc-8355-59ce323f67f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}